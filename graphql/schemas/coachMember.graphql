extend type Mutation {
    create_coach_member(input: CreateCoachMemberInput! @spread): CoachMember @guard @field(resolver: "App\\GraphQL\\Mutations\\CoachMemberMutations@createCoachMember")
    delete_coach_member(input: DeleteCoachMemberInput! @spread): Boolean @guard @field(resolver: "App\\GraphQL\\Mutations\\CoachMemberMutations@deleteCoachMember")
    delete_my_member(input: DeleteMyMemberInput! @spread): Boolean @guard @field(resolver: "App\\GraphQL\\Mutations\\CoachMemberMutations@deleteMyMember")
    update_coach_member(input: UpdateCoachMemberInput! @spread): CoachMember @guard @field(resolver: "App\\GraphQL\\Mutations\\CoachMemberMutations@updateCoachMember")
    add_coach_member(input: AddCoachMemberInput! @spread):JSON @guard @field(resolver: "App\\GraphQL\\Mutations\\CoachMemberMutations@addCoachMember")
    add_goals_to_my_teacher(input: AddGoalsToMyTeacherInput! @spread):JSON @guard @field(resolver: "App\\GraphQL\\Mutations\\CoachMemberMutations@addGoalsToMyTeacher")
}

extend type Query {
    coach_member: [CoachMember!]! @paginate(type: "paginator" model: "App\\Models\\CoachMember")
# search_coach_member(status: String @where(operator: "like") orderBy: [OrderByClause!] @orderBy): [CoachMember] @paginate(type: "paginator" model: "App\\Models\\CoachMember")
    detail_coach_member(user_id: ID! @eq): User @guard @field(resolver:"CoachMemberQueries@detailCoachMembers")
#    my_coach_members: [CoachMember] @guard@field(resolver:"CoachMemberQueries@my_coach_members")
    sort_coach_member(orderBy: [OrderByClause!] @orderBy): [CoachMember] @paginate(type: "paginator" model: "App\\Models\\CoachMember")
    my_list_coach_members: [CoachMember] @guard @field(resolver:"CoachMemberQueries@myListCoachMembers")
    my_list_support_members: [CoachMember] @guard @field(resolver:"CoachMemberQueries@myListSupportMembers")

}

type CoachMember{
    id: ID
    user: User
    org: String
    business_field: String
    goal_ids: JSON
    teacher_id: JSON
    teacher_ids: [ID]
    scale: String
    goals: [GoalCoachMember]
    created_at: DateTime
    updated_at: DateTime
    members: [Member]
    name: String
}

type Member{
    id: ID
    name: String
    number_member: Int
    count_missing: JSON 
    status: String
}
type GoalCoachMember{
    id: ID
    name: String
    started_at_a_goal: DateTime
    count_missing: JSON
    status: String
}
input CreateCoachMemberInput{
    org: String
    business_field: String
    goal_ids: JSON
    teacher_id: ID
    scale: String
}
input DeleteCoachMemberInput{
    id: ID
}
input DetailCoachMemberInput{
    id:ID
}
input UpdateCoachMemberInput{
    id : ID
    org: String
    business_field: String
    goal_ids: JSON
    teacher_id: ID
    scale: String
}
input AddCoachMemberInput{
    user_ids: [ID]
    goal_ids: [ID]
}
input AddGoalsToMyTeacherInput{
    user_id: ID
    goal_ids: [ID]
}
input DeleteMyMemberInput{
    user_id: ID!
}