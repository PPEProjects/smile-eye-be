
extend type Mutation {
    delete_japanese_learn (input: DeleteJapaneseLearnInput! @spread): Boolean @guard @field(resolver: "App\\GraphQL\\Mutations\\JapaneseLearnMutations@deleteJapaneseLearn")
    upsert_japanese_learn(input: UpsertJapaneseLearnInput! @spread): JapaneseLearn @guard @field(resolver: "App\\GraphQL\\Mutations\\JapaneseLearnMutations@upsertJapaneseLearn")
    update_japanese_learn(input: UpdateJapaneseLearnInput! @spread): JapaneseLearn @guard @field(resolver: "App\\GraphQL\\Mutations\\JapaneseLearnMutations@updateJapaneseLearn")
}
extend type Query {
    japanese_learn: [JapaneseLearn] @paginate(type: "paginator" model: "App\\Models\\JapaneseLearn")
    sort_japanese_learn(orderBy: [OrderByClause!] @orderBy): [JapaneseLearn!]! @paginate(type: "paginator" model: "App\\Models\\JapaneseLearn")
    my_japanese_learn: [JapaneseLearn] @field(resolver:"JapaneseLearnQueries@myJapaneseLearn")
    detail_japanese_learn(id:ID): JapaneseLearn @field(resolver:"JapaneseLearnQueries@detailJapaneseLearn")
    list_userid_japanese_learn(goal_id:ID!): UserID @field(resolver:"JapaneseLearnQueries@listUserIDJapaneseLearn")
    progress_user_japanese_learn(name: String): JSON @field(resolver:"JapaneseLearnQueries@progressUserJapaneseLearn")
}

type UserID{
    user_ids: [ID]
}
type JapaneseLearn{
    id: ID
    user_id: ID
    user: User
    goal_id : ID
    goal: Goal
    goal_no_childs: [Goal]
    created_at: DateTime
    updated_at: DateTime
}

input UpsertJapaneseLearnInput{
    id : ID
    goal_id: ID
}
input UpdateJapaneseLearnInput{
    id : ID!
    goal_id: ID
}
input DeleteJapaneseLearnInput{
    id : ID!
}
