
extend type Mutation {
    delete_goal_template (input: DeleteGoalTemplateInput! @spread): Boolean @guard @field(resolver: "App\\GraphQL\\Mutations\\GoalTemplateMutations@deleteGoalTemplate")
    create_goal_template(input: CreateGoalTemplateInput! @spread): GoalTemplate @guard @field(resolver: "App\\GraphQL\\Mutations\\GoalTemplateMutations@createGoalTemplate")
    update_goal_template(input: UpdateGoalTemplateInput! @spread): GoalTemplate @guard @field(resolver: "App\\GraphQL\\Mutations\\GoalTemplateMutations@updateGoalTemplate")
}
extend type Query {
    goal_template: [GoalTemplate] @paginate(type: "paginator" model: "App\\Models\\GoalTemplate")
    sort_goal_template(orderBy: [OrderByClause!] @orderBy): [GoalTemplate!]! @paginate(type: "paginator" model: "App\\Models\\GoalTemplate")
    my_goal_template(status: String): [GoalTemplate] @field(resolver:"GoalTemplateQueries@myGoalTemplate")
    detail_goal_template(id:ID, goal_id: ID): GoalTemplate @field(resolver:"GoalTemplateQueries@detailGoalTemplate")
    list_goal_templates(status: String): [GoalTemplate] @field(resolver:"GoalTemplateQueries@listGoalTemplates")
    list_goal_potential(number_potential: Int): [Goal] @field(resolver:"GoalTemplateQueries@listGoalPotential")
    my_goal_template_unpaid: [Goal] @field(resolver:"GoalTemplateQueries@myGoalTemplateUnpaid")
}

type GoalTemplate{
    id: ID
    user_id: ID
    user: User
    goal_id : ID
    goal: Goal
    members: [User]
    status: String
    sell_goal: String
    request: String
    created_at: DateTime
    updated_at: DateTime
    number_member: Int
    number_buy_on: Int
    number_paid: Int 
    number_trials: Int 
    number_done: Int 
    checked_time: Int
    sum_price: String
}

input CreateGoalTemplateInput{
    goal_id: ID
    status: String
    sell_goal: String
    request: String
}
input UpdateGoalTemplateInput{
    id : ID!
    goal_id: ID
    status: String
    sell_goal: String
    request: String
}
input DeleteGoalTemplateInput{
    id : ID!
}
