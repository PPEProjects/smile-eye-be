
extend type Mutation {
#    create_payment(input: CreatePaymentInput! @spread): Payment @guard @field(resolver: "App\\GraphQL\\Mutations\\PaymentMutations@createPayment")
#    update_payment(input: UpdatePaymentInput! @spread): Payment @guard @field(resolver: "App\\GraphQL\\Mutations\\PaymentMutations@updatePayment")
#    delete_payment(input: DeletePaymentInput! @spread): Boolean @guard @field(resolver: "App\\GraphQL\\Mutations\\PaymentMutations@deletePayment")
    upsert_payment(input: UpsertPaymentInput! @spread): [Payment] @guard @field(resolver: "App\\GraphQL\\Mutations\\PaymentMutations@upsertPayment")
    delete_payment(input: DeletePaymentInput! @spread): Boolean @guard @field(resolver: "App\\GraphQL\\Mutations\\PaymentMutations@deletePayment")
}

extend type Query {
    payments: [Payment] @guard @field(resolver:"PaymentQueries@payments")
    sort_payments(orderBy: [OrderByClause!] @orderBy): [Payment] @paginate(type: "paginator" model: "App\\Models\\Payment")
    my_payments: [Payment] @guard @field(resolver:"PaymentQueries@myPayments")
    detail_payment(id : ID!): Payment @guard @field(resolver:"PaymentQueries@detailPayments")
    detail_payment_by_user_id(status: String, type: String, user_id: ID!): [Payment] @guard @field(resolver:"PaymentQueries@detailPayments")
    detail_my_payment(goal_id : ID!): Payment @guard @field(resolver:"PaymentQueries@detailPayments")
    summary_payments(status: String): [Payment] @guard @field(resolver:"PaymentQueries@summaryPayments")
    total_income(year: String, month: String): TotalIncome @guard @field(resolver:"PaymentQueries@totalIncome")

}

type Payment {
    id: ID
    user: User
    user_id : ID
    add_user_id: ID
    add_user: User
    goal_id: ID
    goal: Goal
    type: String
    status: String
    money: String
    attachments: JSON
    created_at: DateTime
    updated_at: DateTime
    number_member: Int
}
type TotalIncome {
    sum_date: [SumDate]
    sum_goal: SumGoal
}
type SumDate {
    date: String
    sum: Int
    total_admin: Int
    total_owner: Int
    list: [List]
}
type SumGoal {
    total_admin: Int
    total_owner: Int
    list: [List]
}
type List {
    goal: Goal
    money: Int
    owner_percent: Int
    admin_percent: Int
}
input UpsertPaymentInput{
    id: ID
    add_user_id: ID
    goal_id: [ID]
    status: String
    type: String
    money: String
    attachments: JSON
}
input CreatePaymentInput{
    add_user_id: ID
    goal_id: ID
    status: String
    type: String
    money: String
    attachments: JSON
}

input UpdatePaymentInput{
    id: ID!
    add_user_id: ID
    goal_id: ID
    status: String
    type: String
    money: String
    attachments: JSON
}

input DeletePaymentInput{
    id: ID!
}


